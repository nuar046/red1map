/*** Licensed under the KARMA v.1 Law of Sharing. As others have shared freely to you, so shall you share freely back to us.* If you shall try to cheat and find a loophole in this license, then KARMA will exact your share,* and your worldly gain shall come to naught and those who share shall gain eventually above you.* In compliance with previous GPLv2.0 works of Jorg Janke, Low Heng Sin, Carlos Ruiz and contributors.* This Module Creator is an idea put together and coded by Redhuan D. Oon (red1@red1.org)*/package org.map.process;
import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.math.BigDecimal;import org.adempiere.exceptions.AdempiereException;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.hssf.util.CellReference;import org.apache.poi.ss.usermodel.CellType;import org.compiere.model.MAttachment;import org.compiere.model.MAttachmentEntry;import org.compiere.model.MOrder;import org.compiere.model.MOrderLine;import org.compiere.model.MProduct;import org.compiere.model.Query;import org.compiere.process.ProcessInfoParameter;
import org.compiere.process.SvrProcess;import org.compiere.util.Env;

	public class ImportFromExcel extends SvrProcess {
	HSSFWorkbook workbook = new HSSFWorkbook(); 	private String File_Directory = ""; 	private String Description = "";	private File attachedFile;	private FileInputStream file;	int colproduct = 0;	MOrder order = null;	private int cnt=0;
	CellReference cr = null;    	protected void prepare() {
		ProcessInfoParameter[] para = getParameter();
			for (ProcessInfoParameter p:para) {
				String name = p.getParameterName();
				if (p.getParameter() == null)					;
				else if(name.equals("File_Directory")){
					File_Directory = (String)p.getParameter();
			}
				else if(name.equals("Description")){
					Description = (String)p.getParameter();
			}
		}
	}
	protected String doIt() throws IOException {		if (getRecord_ID()==0)			throw new AdempiereException("No Record ID");		order = new MOrder(getCtx(), getRecord_ID(), get_TrxName());		if (Description.length()==0)			throw new AdempiereException("Put Alphabetical Column of Qty"); 		String attachment = "";		if (File_Directory=="") { 			attachment	= getAttachment();			if (attachment.length()>1)				throw new AdempiereException(attachment);					if (attachedFile.toString().endsWith("xls"))				file = new FileInputStream(attachedFile);			else 				throw new AdempiereException("Attached file is not XLS extension");		}else {			if (File_Directory.endsWith("xls"))					file = new FileInputStream(File_Directory);  			else 				throw new AdempiereException("File Directory is not pointing to XLS file");		}		 		workbook = new HSSFWorkbook(file);  		HSSFSheet sheet = workbook.getSheetAt(0);		HSSFRow row = null; 		int rowstart = 0;		int rowend = sheet.getLastRowNum();		int colstart = 0;        int colend = 0;        cr = new CellReference(Description);		for (int i=rowstart;i<rowend+1;i++) {			 row = (HSSFRow)sheet.getRow(i);				 colend=row.getLastCellNum();	         iterateColumns(row, colstart, colend);  		}  		return "Products done:"+cnt;	}	private void iterateColumns(HSSFRow row, int colstart, int colend) {		for (int i=colstart;i<colend+1;i++) {			HSSFCell cell = (HSSFCell)row.getCell(i);			if (colproduct>0) {				cell = (HSSFCell)row.getCell(colproduct);			} 			if (cell==null)				break;			if(cell.getCellType() ==  CellType.NUMERIC)                		continue;			String productstring = cell.getRichStringCellValue().toString().trim(); 		    MProduct product = new Query(getCtx(), MProduct.Table_Name,MProduct.COLUMNNAME_Value+"=?",get_TrxName())		          .setParameters(productstring)		           .first();		    if (product==null) {				 productstring =  productstring.replaceAll("\\s","");				 product = new Query(getCtx(), MProduct.Table_Name,MProduct.COLUMNNAME_Value+"=?",get_TrxName())				          .setParameters(productstring)				           .first();		    }		    if (product==null)		         	continue;		    cnt++;  		    HSSFCell qtycell = row.getCell(cr.getCol());		    BigDecimal qty = Env.ONE;			if (qtycell==null) {				log.warning(productstring+" Has No Qty at Row "+row.getRowNum()+ " at Cell Address "+qtycell.getAddress());			}			if(qtycell.getCellType() !=  CellType.NUMERIC)				throw new AdempiereException(productstring+" Qty Not Numeric at Row "+row.getRowNum()+ " at Cell Address "+qtycell.getAddress());			else				qty = new BigDecimal(qtycell.getNumericCellValue());		    statusUpdate(cnt+". Adding "+qtycell.getNumericCellValue()+" "+productstring);		    boolean found= false;		    			    MOrderLine newline = new MOrderLine(getCtx(),0,get_TrxName());		    newline.setC_Order_ID(order.get_ID());		    newline.setM_Product_ID(product.get_ID());		    newline.setQty(qty);		    newline.setC_UOM_ID(product.getC_UOM_ID());		    newline.saveEx(get_TrxName());		    colproduct=cell.getAddress().getColumn();		    break;		}	} 			private String getAttachment() { 		MAttachment attachment = order.getAttachment();		if (attachment == null) {			return "Please attach CSV File containing Product items";		}		MAttachmentEntry entry = attachment.getEntry(0);		if (entry == null) {			return "NO XLS ATTACHED";		}		// Check filename is .csv		attachedFile = entry.getFile();		log.info("Attached File Name->" + attachedFile);				return "";	}}
